from aiogram import F
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message

from bot.services.audio_processing import search_music_on_platforms
from bot.utils.storage import save_temp_audio
from config import AUDIO_TEMP_DIR

router = Router()

@router.message(Command("search"))
@router.message(F.text & ~F.text.startswith(('http://', 'https://')))
async def handle_music_search(message: Message):
    try:
        query = message.text if not message.text.startswith('/search') else message.text.replace('/search', '').strip()
        if not query:
            return await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
        
        await message.answer(f"üîç –ò—â—É —Ç—Ä–µ–∫: {query}")
        
        # –ò—â–µ–º —Ç—Ä–µ–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö
        audio_data, track_info = await search_music_on_platforms(query)
        if not audio_data:
            return await message.answer("‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_path = await save_temp_audio(AUDIO_TEMP_DIR, audio_data, f"{track_info['artist']} - {track_info['title']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_path, 'rb') as audio_file:
            await message.answer_audio(
                audio_file,
                title=track_info['title'],
                performer=track_info['artist'],
                caption=f"üéµ {track_info['artist']} - {track_info['title']}"
            )
            
    except Exception as e:
        logging.error(f"Error in handle_music_search: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–∞")